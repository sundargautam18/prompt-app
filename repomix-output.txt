This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-10T06:19:00.160Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
index.js
package.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: index.js
================
#!/usr/bin/env node

import inquirer from "inquirer";

async function main() {
  console.log("🚀 Welcome to Create MyApp!");

  // Step 1: Ask for Project Name
  const { projectName } = await inquirer.prompt([
    {
      type: "input",
      name: "projectName",
      message: "What is your project name?",
      default: "my-app",
    },
  ]);

  // Step 2: Ask for Project Type
  const { projectType } = await inquirer.prompt([
    {
      type: "list",
      name: "projectType",
      message: "What type of project are you creating?",
      choices: ["Frontend", "Backend", "Full Stack"],
    },
  ]);

  // Step 3: Ask for Framework Based on Type
  let frameworkChoices = [];
  if (projectType === "Frontend") {
    frameworkChoices = ["React", "Vue", "Svelte", "Next.js"];
  } else if (projectType === "Backend") {
    frameworkChoices = ["Express.js", "NestJS", "Fastify"];
  } else {
    frameworkChoices = [
      "Next.js (Full Stack)",
      "Nuxt.js (Full Stack)",
      "Remix",
    ];
  }

  const { framework } = await inquirer.prompt([
    {
      type: "list",
      name: "framework",
      message: `Choose a ${projectType} framework:`,
      choices: frameworkChoices,
    },
  ]);

  // Debugging log
  console.log(`📌 Debug: Project Name -> ${projectName}`);
  console.log(`📌 Debug: Project Type -> ${projectType}`);
  console.log(`📌 Debug: Framework -> ${framework}`);

  // Step 4: Recommend Installation Command
  let installCommand = "";

  if (framework === "React") {
    installCommand = `npx create-react-app ${projectName}`;
  } else if (framework === "Vue") {
    installCommand = `npm init vue@latest ${projectName}`;
  } else if (framework === "Svelte") {
    installCommand = `npx degit sveltejs/template ${projectName}`;
  } else if (framework === "Next.js") {
    installCommand = `npx create-next-app@latest ${projectName}`;
  } else if (framework === "Express.js") {
    installCommand = `mkdir ${projectName} && cd ${projectName} && npm init -y && npm install express`;
  } else if (framework === "NestJS") {
    installCommand = `npx @nestjs/cli new ${projectName}`;
  } else if (framework === "Fastify") {
    installCommand = `mkdir ${projectName} && cd ${projectName} && npm init fastify@latest`;
  } else if (framework === "Next.js (Full Stack)") {
    installCommand = `npx create-next-app@latest ${projectName}`;
  } else if (framework === "Nuxt.js (Full Stack)") {
    installCommand = `npx nuxi init ${projectName}`;
  } else if (framework === "Remix") {
    installCommand = `npx create-remix@latest ${projectName}`;
  } else {
    console.error("❌ Error: No framework selected.");
    process.exit(1);
  }

  console.log("\n✅ Recommended command to create your project:");
  console.log(`\n> ${installCommand}\n`);
}

// Run the CLI
main().catch((err) => console.error("Error:", err));

================
File: package.json
================
{
  "name": "create-aitc",
  "version": "1.0.1",
  "description": "A CLI tool to scaffold a new project",
  "bin": {
    "create-aitc": "index.js"
  },
  "type": "module",
  "dependencies": {
    "inquirer": "^12.4.3"
  }
}
